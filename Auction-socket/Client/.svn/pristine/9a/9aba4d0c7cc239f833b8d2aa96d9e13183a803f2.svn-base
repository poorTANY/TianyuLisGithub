package auction;

import java.awt.Color;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;

import customComponents.CustomButton;
import customComponents.CustomPanel;
import customComponents.CustomTable;

public class BidListTab extends CustomPanel implements Observer {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	 
    private JTable table = null;
 
    private JScrollPane s_pan = null;
    
    private CustomButton button_refresh = null;
    
    BidListTable tableModel = null;
    
    private BidListModel model;
    
    
	public BidListTab(Socket socket) {
		
		tableModel = new BidListTable();
		table = new JTable(tableModel);
		
		BidListModel model = new BidListModel(socket, table, tableModel);
		this.model = model;
        
        //table.setBackground(Color.white);
        setHorizontalAlignment(table);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //TableColumnModel tcm = table.getColumnModel();
 
        s_pan = new JScrollPane(table);
        
        this.setLayout(null);
        
        button_refresh = new CustomButton("refresh");
        button_refresh.setBounds(680, 460, 80, 31);
        button_refresh.addActionListener(ae -> {disable(button_refresh);model.refresh();});
        
        add(s_pan);
        s_pan.setBounds(10, 50, 760, 400);
		
		//add content
        add(button_refresh);
        
        model.refresh();
	}
	
	private void setHorizontalAlignment(JTable table) {
		CustomTable customTable = new CustomTable();
		table.setDefaultRenderer(Object.class, customTable);
		/*DefaultTableCellRenderer tableCellRenderer = new DefaultTableCellRenderer();
		tableCellRenderer.setHorizontalAlignment(JLabel.LEFT);
		for(int i = 0; i< table.getColumnCount();i++)  
        {  
            TableColumn col = table.getColumn(table.getColumnName(i));  
            col.setCellRenderer(tableCellRenderer);  
        }*/
	}
	
	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub

	}
	
	static void disable(JButton b) {
	    b.setEnabled(false);
	    new SwingWorker() {
	        @Override protected Object doInBackground() throws Exception {
	            Thread.sleep(5000);
	            return null;
	        }
	        @Override protected void done() {
	            b.setEnabled(true);
	        }
	    }.execute();
	}

}
