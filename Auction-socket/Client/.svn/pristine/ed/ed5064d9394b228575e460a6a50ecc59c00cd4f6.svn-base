package auction;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.sql.ResultSet;
import java.util.Observable;

import javax.swing.JTable;

import dependency.*;

public class MarketModel extends Observable{

	Socket socket = null;
	JTable table = null;
    MarketTable tableModel = null;
    private Protocol protocol;
    
    public MarketModel(Socket socket, JTable table, MarketTable tableModel) {
       	this.socket = socket;
    	this.table = table;
    	this.tableModel = tableModel;
    	protocol = new Protocol();
    }
    
	public void addItem() {
		tableModel.addRow("macbook", "long", "kobe", 100, 1000);
        table.updateUI();
    }
 
    public void cleanItems() {
    	tableModel.removeRows(0, tableModel.getRowCount());
        table.updateUI();
    }
    
    public void getData() {
        int col = tableModel.getColumnCount();
        int row = tableModel.getRowCount();
        for (int i = 0; i < col; i++) {
            System.out.print(tableModel.getColumnName(i) + "\t");
        }
        System.out.print("\r\n");
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                System.out.print(tableModel.getValueAt(i, j) + "\t");
            }
            System.out.print("\r\n");
        }
        System.out.println("------------------------------------");
    }


	public void bid() {
		
	}


	public void search(String searchText) {
		
		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());

			String str = protocol.createMessage("search", searchText);

			out.writeUTF(str);
			out.flush();
			
			tableModel = new MarketTable();
			table = new JTable(tableModel);

			String fromServer = in.readUTF();
			String[] results = protocol.decodeMessage(fromServer);
			
			while (!results[0].equals("table complete.")){
				
				String name = results[0];
				String time_left = results[1];
				String seller = results[2];
				int current_price = Integer.parseInt(results[3]);
				int fix_price = Integer.parseInt(results[4]);
				
				tableModel.addRow(name, time_left, seller, current_price, fix_price);
				
				fromServer = in.readUTF();
				results = protocol.decodeMessage(fromServer);
			}
			
			table.updateUI();
		}

		catch (IOException e) {
			e.printStackTrace();
		}
		
	}
}
