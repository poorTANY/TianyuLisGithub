package waitingRoom;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import customComponents.CustomTable;

import customComponents.CustomButton;
import customComponents.CustomHeader;
import customComponents.CustomLabel;
import customComponents.CustomPanel;
import customComponents.CustomTextField;

public class WaitingRoomView extends CustomPanel implements Observer{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private WaitingRoom model;
	
	private JFrame frame = null;
	 
    private JTable table = null;
 
    private JScrollPane s_pan = null;
 
    private CustomButton button_1 = null, button_2 = null, button_3 = null, button_4 = null, confirmButton;
    
    private CustomTextField roomName;
    
    private JComboBox<String> availability;
    
    private JComboBox<Integer> numberOfPlayers;
    
    private CustomLabel roomLabel, availabilityLabel, numberOfPlayersLabel, roomNameErrorMessage, selectRoomErrorMessage;
    
    private boolean creation = false;
    
    private Timer timer;
    
    public WaitingRoomView(WaitingRoom model, JTable table, JFrame frame) {
		
    	this.table = table;
		this.frame = frame;
		this.model = model;
		model.addObserver(this);
		frame.setTitle("Waiting Room");
		
		roomName = new CustomTextField("",10);
		String[] aOptions = {"Open", "Closed"};
		availability = new JComboBox<String>(aOptions);
		Integer[] pOptions = {2,3,4};
		numberOfPlayers = new JComboBox<Integer>(pOptions);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		roomLabel = new CustomLabel("Room Name");
		availabilityLabel = new CustomLabel("Availability");
		numberOfPlayersLabel = new CustomLabel("Max Players");
		roomNameErrorMessage = new CustomLabel("Error: Invalid room name");
		selectRoomErrorMessage = new CustomLabel("");
        
		 button_1 = new CustomButton("Add room");
		 button_1.addActionListener(ae -> {creation = true; showRoomCreationOptions();});
	        
	     button_2 = new CustomButton("Edit Room");
	     button_2.addActionListener(ae -> {creation = false; showRoomEditOptions();});
	        
	     button_3 = new CustomButton("Select room");
	     button_3.addActionListener(ae -> {selectRoomErrorMessage.setVisible(false);
	     if(table.getSelectedRow() != -1){model.selectRoom(table.getValueAt(table.getSelectedRow(), 1).toString());}
	     else{selectRoomErrorMessage.setText("Error: Please select a room"); selectRoomErrorMessage.setVisible(true);};});
	        
	     button_4 = new CustomButton("Refresh");
	     button_4.addActionListener(ae -> {disable(button_4); timer.restart(); model.checkForRooms();});
	        
	     confirmButton = new CustomButton("Confirm");
	     confirmButton.addActionListener(ae ->
	     	{
	     		if(creation == true){
	     		if(!roomName.getText().equals("")){
	     			roomNameErrorMessage.setVisible(false);
	     	model.addRoom(roomName.getText(), (String)availability.getSelectedItem(), (Integer)numberOfPlayers.getSelectedItem());
	     	hideRoomCreationOptions();
	     	roomName.setText("");}
	     		else{
	     		roomNameErrorMessage.setVisible(true);	
	     			}
	     		}
	     		else{
	     			if(table.getSelectedRow() != -1){model.editRoom(table.getValueAt(table.getSelectedRow(), 1).toString(), table.getValueAt(table.getSelectedRow(), 4).toString(), availability.getSelectedItem().toString(), numberOfPlayers.getSelectedItem().toString());
	     			hideRoomEditOptions();
	     		}
	     	}
	     	});
	        
	        roomName.setVisible(false);
			availability.setVisible(false);
			numberOfPlayers.setVisible(false);
			confirmButton.setVisible(false);
			roomLabel.setVisible(false);
			availabilityLabel.setVisible(false);
			numberOfPlayersLabel.setVisible(false);
			roomNameErrorMessage.setVisible(false);
			selectRoomErrorMessage.setVisible(false);
        
        
        setTableFormatting(table);
        TableColumnModel tcm = table.getColumnModel();
        
        tcm.getColumn(0).setPreferredWidth(50);
        tcm.getColumn(1).setPreferredWidth(100);
        tcm.getColumn(2).setPreferredWidth(100);
        tcm.getColumn(3).setPreferredWidth(100);
 
        s_pan = new JScrollPane(table);
        
        this.setLayout(null);
        add(button_1);
        add(button_2);
        add(button_3);
        add(button_4);
        button_1.setBounds(140, 20, 120, 35);
        button_2.setBounds(340, 20, 120, 35);
        button_3.setBounds(540, 20, 120, 35);
        button_4.setBounds(540, 500, 120, 35);
        add(roomLabel);
	    add(roomName);
	    add(availabilityLabel);
	    add(availability);
	    add(numberOfPlayersLabel);
	    add(numberOfPlayers);
	    add(confirmButton);
	    add(roomNameErrorMessage);
	    add(selectRoomErrorMessage);
	    selectRoomErrorMessage.setBounds(240,500,300,35);
	    roomNameErrorMessage.setBounds(240,500,180,35);
        button_1.setBounds(140, 20, 120, 35);
        button_2.setBounds(340, 20, 120, 35);
        button_3.setBounds(540, 20, 120, 35);
        button_4.setBounds(540, 500, 120, 35);
        roomLabel.setBounds(0,20,100,35);
        roomName.setBounds(110, 20, 100, 35);
        availabilityLabel.setBounds(210, 20, 100, 35);
        availability.setBounds(310,20,100,35);
        numberOfPlayersLabel.setBounds(410,20,100,35);
        numberOfPlayers.setBounds(510,20,100,35);
        confirmButton.setBounds(610,20,100,35);
        

        button_3.setBounds(540, 20, 120, 35);
        add(s_pan);
        s_pan.setBounds(10, 80, 780, 400);
        
        frame.add(this);
        frame.setVisible(true);
        frame.setResizable(false);
        startTimer();
 		
   	}
	
	private void setTableFormatting(JTable table) {
	      
		CustomTable customTable = new CustomTable();
		table.setDefaultRenderer(Object.class, customTable);
		table.getTableHeader().setDefaultRenderer(new CustomHeader());
		
	}
	
	public void showRoomCreationOptions(){
		roomName.setVisible(true);
		availability.setVisible(true);
		numberOfPlayers.setVisible(true);
		confirmButton.setVisible(true);
		roomLabel.setVisible(true);
		availabilityLabel.setVisible(true);
		numberOfPlayersLabel.setVisible(true);
		button_1.setVisible(false);
		button_2.setVisible(false);
		button_3.setVisible(false);
		
	}
	
	public void hideRoomCreationOptions(){
		roomName.setVisible(false);
		availability.setVisible(false);
		numberOfPlayers.setVisible(false);
		confirmButton.setVisible(false);
		roomLabel.setVisible(false);
		availabilityLabel.setVisible(false);
		numberOfPlayersLabel.setVisible(false);
		button_1.setVisible(true);
		button_2.setVisible(true);
		button_3.setVisible(true);
	}
	
	public void showRoomEditOptions(){
		availability.setVisible(true);
		numberOfPlayers.setVisible(true);
		confirmButton.setVisible(true);
		availabilityLabel.setVisible(true);
		numberOfPlayersLabel.setVisible(true);
		button_1.setVisible(false);
		button_2.setVisible(false);
		button_3.setVisible(false);
	}
	
	public void hideRoomEditOptions(){
		availability.setVisible(false);
		numberOfPlayers.setVisible(false);
		confirmButton.setVisible(false);
		availabilityLabel.setVisible(false);
		numberOfPlayersLabel.setVisible(false);
		button_1.setVisible(true);
		button_2.setVisible(true);
		button_3.setVisible(true);
	}
	

	@Override
	public void update(Observable o, Object arg) {
		if(model.isValidRoomName() == false){
			roomNameErrorMessage.setVisible(true);
			model.setValidRoomName(true);
		}
		if(!model.getSelectRoomErrorMessage().equals("")){
			selectRoomErrorMessage.setText(model.getSelectRoomErrorMessage());
			selectRoomErrorMessage.setVisible(true);
			model.setSelectRoomErrorMessage("");
		}
		
	}
	
	public void startTimer(){
		timer = new Timer(0, new ActionListener() {
	
			   @Override
			   public void actionPerformed(ActionEvent e) {
				  disable(button_4);
			      model.checkForRooms();
			   }
			});
	
			timer.setDelay(15000);
			timer.start();
	}
	
	public void stopTimer(){
		timer.stop();
	}
	
	static void disable(JButton b) {
	    b.setEnabled(false);
	    new SwingWorker() {
	        @Override protected Object doInBackground() throws Exception {
	            Thread.sleep(5000);
	            return null;
	        }
	        @Override protected void done() {
	            b.setEnabled(true);
	        }
	    }.execute();
	}
	

}
