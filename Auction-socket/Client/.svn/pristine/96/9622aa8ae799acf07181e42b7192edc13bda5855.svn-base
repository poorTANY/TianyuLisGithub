package waitingRoom;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Timer;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;

import auction.*;
import dependency.Protocol;

public class WaitingRoom extends Observable {
	/**
	 * @author jep537
	 * WaitingRoom class which acts as a model for WaitingRoomView. Communicates with the server whenever a user wishes to
	 * add a room, edit a room, refresh the room table or select a room.
	 */
	Socket socket;
	JFrame frame;
	JTable table = null;
	RoomTable tableModel = null;
	private String selectRoomErrorMessage = "";
	private String username;
	private WaitingRoomView view;

	/**
	 * Constructor for WaitingRoom takes in a socket, frame and username, creates a new WaitingRoomView and runs a method
	 * to check for any rooms already on the server.
	 * @param socket Socket for communicating with the server.
	 * @param frame Frame to load the panel onto.
	 * @param username Username of the user.
	 */
	public WaitingRoom(Socket socket, JFrame frame, String username) {
		this.socket = socket;
		tableModel = new RoomTable();
		table = new JTable(tableModel);
		this.frame = frame;
		view = new WaitingRoomView(this, table, frame);
		this.username = username;
		checkForRooms();
	}

	/**
	 * Method to add a room to the server. Creates the room if the server returns true, shows an error if the server returns
	 * false.
	 * @param name Name of the room to be created
	 * @param availability Availability of the room to be created
	 * @param numberOfPlayers Maximum number of players allowed in the room to be created.
	 */
	public void addRoom(String name, String availability, Integer numberOfPlayers) {

		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());

			String str = Protocol.createMessage("create-room", name, availability, numberOfPlayers.toString(), username);

			out.writeUTF(str);
			out.flush();

			String fromServer = in.readUTF();

			String[] results = Protocol.decodeMessage(fromServer);

			if (results[0].equals("create-room")) {
				if (results[1].equals("true")) {
					tableModel.addRow(name, availability, "0/" + numberOfPlayers, username);
					table.updateUI();
				} else {
					JOptionPane.showMessageDialog(frame,
							"Invalid Room name",
						    "Error",
						    JOptionPane.WARNING_MESSAGE);
				}
			}
		}

		catch (IOException e) {
			JOptionPane.showMessageDialog(null, "server disconnected", "", JOptionPane.ERROR_MESSAGE);
			System.exit(0);
		}
	}

	/**
	 * Wipes all of the rooms from the table.
	 */
	public void cleanRoom() {
		tableModel.removeRows(0, tableModel.getRowCount());
		table.updateUI();
	}

	/**
	 * Prints out of the data in the table.
	 */
	public void getData() {
		int col = tableModel.getColumnCount();
		int row = tableModel.getRowCount();
		for (int i = 0; i < col; i++) {
			System.out.print(tableModel.getColumnName(i) + "\t");
		}
		System.out.print("\r\n");
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				System.out.print(tableModel.getValueAt(i, j) + "\t");
			}
			System.out.print("\r\n");
		}
		System.out.println("------------------------------------");
	}

	/**
	 * Sends a request to the server to find all rooms currently available. Then updates the table with all rooms returned
	 * from the server.
	 */
	public void checkForRooms() {
		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());

			String[] toSendArray = {"roomCheck"};

			String str = Protocol.createMessage(toSendArray);

			out.writeUTF(str);
			out.flush();

			String fromServer = in.readUTF();

			String[] results = Protocol.decodeMessage(fromServer);

			cleanRoom();
			
			if (results[0].equals("roomCheck")) {
				for (int i = 1; i < results.length - 1; i += 4) {
					tableModel.addRow(results[i], results[i + 1], results[i + 2], results[i+3]);
				}
			}

			table.updateUI();

		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "server disconnected", "", JOptionPane.ERROR_MESSAGE);
			System.exit(0);
		}
	}

	/**
	 * Sends a request to the server for the user to join the selected room. If the server returns true then the user
	 * is allowed to join the room, else an error message is shown.
	 * @param selectedRoom Room that the user wishes to join.
	 */
	public void selectRoom(String selectedRoom) {

		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());

			String[] toSendArray = {"select-room", selectedRoom, username};
			String str = Protocol.createMessage(toSendArray);

			out.writeUTF(str);
			out.flush();

			String fromServer = in.readUTF();

			String[] results = Protocol.decodeMessage(fromServer);

			if (results[0].equals("select-room")) {
				if (results[1].equals("true")) {
					view.stopTimer();
					new Auction(socket, frame);
				}
				else {
					selectRoomErrorMessage = results[2];
					JOptionPane.showMessageDialog(frame,
							selectRoomErrorMessage,
						    "Error",
						    JOptionPane.WARNING_MESSAGE);
					setChanged();
					notifyObservers(selectRoomErrorMessage);
				}
			} 
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "server disconnected", "", JOptionPane.ERROR_MESSAGE);
			System.exit(0);
		}

	}
	
	/**
	 * Sends a request to the server for a room's details to be edited. The server then returns the new
	 * status of the rooms.
	 * @param selectedRoom Room that the user wishes to edit.
	 * @param owner Owner of the room.
	 * @param availability Availability the user wishes to change the room to.
	 * @param numberOfPlayers Max number of players the user wishes to change the room to.
	 */
	public void editRoom(String selectedRoom, String owner, String availability, String numberOfPlayers){
		if(username.equals(owner)){
			try{
				DataInputStream in = new DataInputStream(socket.getInputStream());
				DataOutputStream out = new DataOutputStream(socket.getOutputStream());
				
				String[] toSendArray = {"edit-room", selectedRoom, availability, numberOfPlayers};
				
				String str = Protocol.createMessage(toSendArray);

				out.writeUTF(str);
				out.flush();
				
				String fromServer = in.readUTF();
				
				String[] results = Protocol.decodeMessage(fromServer);
				
				if (results[0].equals("edit-room")) {
					if (results[1].equals("complete")) {
						checkForRooms();
					}
				}
			}
			catch(IOException e){
				JOptionPane.showMessageDialog(null, "server disconnected", "", JOptionPane.ERROR_MESSAGE);
				System.exit(0);
			}
		}
		else{
				JOptionPane.showMessageDialog(frame,
						"You do not own this room",
					    "Error",
					    JOptionPane.WARNING_MESSAGE);
		}
	}

	/**
	 * @return selectRoomErrorMessage.
	 */
	public String getSelectRoomErrorMessage() {
		return selectRoomErrorMessage;
	}

	/**
	 * Setter for selectRoomErrorMessage
	 * @param selectRoomErrorMessage
	 */
	public void setSelectRoomErrorMessage(String selectRoomErrorMessage) {
		this.selectRoomErrorMessage = selectRoomErrorMessage;
	}

	
	
}
