package waitingRoom;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;

import javax.swing.JFrame;
import javax.swing.JTable;

import auction.*;
import dependency.Protocol;

public class WaitingRoom extends Observable {
	Socket socket;
	JFrame frame;
	JTable table = null;
	RoomTable tableModel = null;
	private Protocol protocol;
	private boolean validRoomName = true;

	public WaitingRoom(Socket socket, JFrame frame) {
		this.socket = socket;
		tableModel = new RoomTable();
		table = new JTable(tableModel);
		this.frame = frame;
		new WaitingRoomView(this, table, frame);
		protocol = new Protocol();

		checkForRooms(new ArrayList<String>());
	}

	public void addRoom(String name, String availability, Integer numberOfPlayers) {
		
		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());
			
			String str = protocol.createMessage("create-room", name, availability, numberOfPlayers.toString());
			
			out.writeUTF(str);
			out.flush();
		
			String fromServer = in.readUTF();
			
			String[] results = protocol.decodeMessage(fromServer);
			
			if (results[0].equals("create-room")){
				if(results[1].equals("true")){
					tableModel.addRow(name, availability, numberOfPlayers);
					table.updateUI();
				}
				else{
					validRoomName = false;
					setChanged();
					notifyObservers();
				}
			}
		}
		
		catch(IOException e){
			e.printStackTrace();
		}
	}

	public void cleanRoom() {
		tableModel.removeRows(0, tableModel.getRowCount());
		table.updateUI();
	}

	public void getData() {
		int col = tableModel.getColumnCount();
		int row = tableModel.getRowCount();
		for (int i = 0; i < col; i++) {
			System.out.print(tableModel.getColumnName(i) + "\t");
		}
		System.out.print("\r\n");
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				System.out.print(tableModel.getValueAt(i, j) + "\t");
			}
			System.out.print("\r\n");
		}
		System.out.println("------------------------------------");
	}

	public void checkForRooms(ArrayList<String> names) {
		try {
			DataInputStream in = new DataInputStream(socket.getInputStream());
			DataOutputStream out = new DataOutputStream(socket.getOutputStream());

			ArrayList<String> toSend = new ArrayList<String>(names);
			toSend.add(0, "roomCheck");

			String[] toSendArray = new String[toSend.size()];
			toSendArray = toSend.toArray(toSendArray);

			String str = protocol.createMessage(toSendArray);

			out.writeUTF(str);
			out.flush();

			String fromServer = in.readUTF();

			String[] results = protocol.decodeMessage(fromServer);

			if (results[0].equals("roomCheck")) {
				for (int i = 1; i < results.length - 1; i += 3) {
					tableModel.addRow(results[i], results[i + 1], Integer.parseInt(results[i + 2]));
				}
			}

			table.updateUI();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void selectRoom(int selectedRoom) {

		/*
		 * try{ DataInputStream in = new
		 * DataInputStream(socket.getInputStream()); DataOutputStream out = new
		 * DataOutputStream(socket.getOutputStream());
		 * 
		 * String str =
		 * protocol.createMessage("selectRoom",Integer.toString(selectedRoom));
		 * 
		 * 
		 * 
		 * 
		 * 
		 * }
		 */

		new Auction(socket, frame);
	}

	public boolean isValidRoomName() {
		return validRoomName;
	}

	
}
