package logIn;



import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.ParseException;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.synth.SynthLookAndFeel;


//To do: Prevent Enter and Tab changing textfield sizes


public class logInView extends JFrame implements Observer{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private logIn model;
	private JTextField username = new JTextField("username",30);
	private JLabel usernameLabel = new JLabel("Username");
	private JPasswordField password = new JPasswordField("password",30);
	private JLabel passwordLabel = new JLabel("Password");
	private JButton buttonLogin = new JButton();
	private JButton buttonRegister = new JButton();
	
	
	
	public logInView(logIn model, long serialID){
		super(String.format("login   - ID:0x%04x", serialID));
		this.model = model;
		try {
			setLAF();
		} catch (MalformedURLException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		//Text areas
		username.setBorder(BorderFactory.createLineBorder(Color.black,1));
		password.setBorder(BorderFactory.createLineBorder(Color.black,1));
		username.addFocusListener(new UsernameFocusListener());
		password.addFocusListener(new PasswordFocusListener());
		
		//Panels
		JPanel bigPanel = new JPanel();
		
		//Add to panel
		bigPanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.insets = new Insets(10,10,10,10);
		
		c.gridx = 0;
		c.gridy = 1;
		bigPanel.add(usernameLabel,c);
		
		c.gridx = 0;
		c.gridy = 2;
		bigPanel.add(username,c);
		
		c.gridx = 0;
		c.gridy = 3;
		bigPanel.add(passwordLabel,c);
		
		c.gridx = 0;
		c.gridy = 4;
		bigPanel.add(password,c);
		
		c.gridx = 0;
		c.gridy = 5;
		bigPanel.add(buttonLogin,c);
		
		c.gridx = 0;
		c.gridy = 6;
		bigPanel.add(buttonRegister,c);
		
		
		//Add listeners
		buttonLogin.addActionListener(ae -> {try {
			
			this.dispose();
			
			model.login(username.getText(), password.getText());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}});
		buttonRegister.addActionListener(ae -> {this.dispose(); model.register();});
		
		//Adding to Frame
		
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setContentPane(bigPanel);
		this.pack();
		this.setVisible(true);
		this.setSize(800,600);
		this.setMinimumSize(this.getPreferredSize());
		SwingUtilities.updateComponentTreeUI(this);
		this.pack();
		model.addObserver(this);
		
	}	
	
	
	
	private class UsernameFocusListener implements FocusListener{
	      public void focusGained(FocusEvent e) {
	    	  if(username.getText().equals("username")){
	    	  	username.setText("");
	    	  }
	      }

		@Override
		public void focusLost(FocusEvent e) {
			if(username.getText().equals("")){
				username.setText("username");
			}
		}
	}
	
	private class PasswordFocusListener implements FocusListener{
	      public void focusGained(FocusEvent e) {
	    	  if(password.getText().equals("password")){
	    		  password.setText("");
	    	  }
	      }

		@Override
		public void focusLost(FocusEvent e) {
			if(password.getText().equals("")){
				password.setText("password");
			}
		}
	}
	
	@Override
	public void update(Observable o, Object arg) {
		
	}
	
	public void setLAF() throws MalformedURLException, IOException{
		SynthLookAndFeel laf = new SynthLookAndFeel();
		try {
			laf.load(logInView.class.getResourceAsStream("AuctionLAF.xml"), logInView.class);
			try {
				UIManager.setLookAndFeel(laf);
			} catch (UnsupportedLookAndFeelException e) {
				e.printStackTrace();
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}
	
}
