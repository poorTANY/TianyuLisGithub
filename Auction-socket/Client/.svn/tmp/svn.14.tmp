package auction;

import java.net.Socket;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;
import javax.swing.table.TableColumnModel;

import customComponents.CustomButton;
import customComponents.CustomHeader;
import customComponents.CustomPanel;
import customComponents.CustomTable;

public class BidListTab extends CustomPanel implements Observer {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	 
    private JTable table = null;
 
    private JScrollPane s_pan = null;
    
    private CustomButton button_refresh = null;
    
    BidListTable tableModel = null;
    
    //private BidListModel model;
    
    
	public BidListTab(Socket socket) {
		
		tableModel = new BidListTable();
		table = new JTable(tableModel);
		
		BidListModel model = new BidListModel(socket, table, tableModel);
		//this.model = model;
        
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		setTableFormatting(table);
        TableColumnModel tcm = table.getColumnModel();
        
        tcm.getColumn(0).setPreferredWidth(90);
        tcm.getColumn(1).setPreferredWidth(210);
        tcm.getColumn(2).setPreferredWidth(150);
        tcm.getColumn(3).setPreferredWidth(150);
        tcm.getColumn(4).setPreferredWidth(130);
        tcm.getColumn(5).setPreferredWidth(130);
        tcm.getColumn(6).setPreferredWidth(110);
 
        s_pan = new JScrollPane(table);
        
        this.setLayout(null);
        
        button_refresh = new CustomButton("Refresh",12);
        button_refresh.setBounds(860, 460, 120, 31);
        button_refresh.addActionListener(ae -> {disable(button_refresh);model.refresh();});
        
        add(s_pan);
        s_pan.setBounds(10, 50, 970, 400);
		
		//add content
        add(button_refresh);
        
        model.refresh();
	}
	
	private void setTableFormatting(JTable table) {

		CustomTable customTable = new CustomTable();
		table.setDefaultRenderer(Object.class, customTable);
		table.getTableHeader().setReorderingAllowed(false);
		table.getTableHeader().setResizingAllowed(false);
		table.getTableHeader().setDefaultRenderer(new CustomHeader());

	}
	
	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub

	}
	
	static void disable(JButton b) {
	    b.setEnabled(false);
	    new SwingWorker<Object, Object>() {
	        @Override protected Object doInBackground() throws Exception {
	            Thread.sleep(5000);
	            return null;
	        }
	        @Override protected void done() {
	            b.setEnabled(true);
	        }
	    }.execute();
	}

}
