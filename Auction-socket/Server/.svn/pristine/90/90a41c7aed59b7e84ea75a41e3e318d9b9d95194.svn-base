import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;

import dependency.*;

public class ClientThread implements Runnable {

	private Socket socket;
	private long serialID;
	private int loginTryNum = 0;
	private boolean accepted = false;
	private Map<Item, User> market;
	private User user;
	private Server server;

	// private Protocol protocol = new Protocol();

	private Database db = new Database();

	DataInputStream in;
	DataOutputStream out;

	public ClientThread(Socket socket, long serialID, Server server) {
		this.socket = socket;
		this.serialID = serialID;
		this.server = server;
		// this.market = market;

		db.open();
	}

	@Override
	public void run() {
		try {
			in = new DataInputStream(socket.getInputStream());
			out = new DataOutputStream(socket.getOutputStream());

			String tmp = in.readUTF();

			System.out.println(tmp);

			if (tmp.equals("connect to Miami")) {

				out.writeUTF("Welcome! - Miami");
				out.writeLong(serialID);
				out.flush();

				System.out.printf("ID:0x%04x succeed!\n", serialID);

			}

			else {
				out.writeUTF("access deined!");
				System.out.printf("ID:0x%04x failed!\n", serialID);
			}

			// out.flush();
			// out.close();

			// test the protocol

			// tmp = in.readUTF();

			pending();

			System.out.printf("ID:0x%04x disconnected\n", serialID);

		} catch (IOException e) {

			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void pending() throws SQLException {

		try {

			String tmp;

			while (true) {

				tmp = in.readUTF();

				String[] fromClient = Protocol.decodeMessage(tmp);

				// System.out.println("receive login message" + fromClient[0] +
				// fromClient[1]);

				if (fromClient[0].equals("login")) {

					System.out.println("receive login message and send back to client");

					Boolean result = db.checkLogin(fromClient[1], fromClient[2]);

					out.writeUTF(Protocol.createMessage("bool", result.toString()));

					out.flush();

					if (result) {

						user = db.getUser(fromClient[1]);

					}

					// out.close();
				}

				// check register
				if (fromClient[0].equals("register")) {

					System.out.println("receive register message from client");

					// checkUsername method check if the username is already in
					// the database
					// if so, means the register could not use this username
					Boolean resulttmp = db.checkUsername(fromClient[1]);
					Boolean result = !resulttmp;
					System.out.println(result);
					out.writeUTF(Protocol.createMessage("bool", result.toString()));
					out.flush();
					// out.close();
				}

				// create new user
				if (fromClient[0].equals("create")) {

					System.out.println("Create new user");

					db.insert(fromClient[1], fromClient[2]);
				}

				// add item
				if (fromClient[0].equals("additem")) {

					System.out.println("add new item");

					// this.market.put(new
					// Item(fromClient[1],Double.parseDouble(fromClient[2])),user
					// );
					// db.addItem(name, owner, seller, price, duration);
				}

				if (fromClient[0].equals("roomCheck")) {

					ArrayList<String> message = new ArrayList<String>(server.getRooms());
					System.out.println(message);

					for (int i = 1; i < fromClient.length; i++) {
						if (message.contains(fromClient[i])) {
							message.remove((message.indexOf(fromClient[i])) + 2);
							message.remove((message.indexOf(fromClient[i])) + 1);
							message.remove(message.indexOf(fromClient[i]));

						}
					}

					System.out.print(message);

					message.add(0, "roomCheck");
					String messagesToSend[] = new String[message.size()];
					messagesToSend = message.toArray(messagesToSend);
					String str = Protocol.createMessage(messagesToSend);

					out.writeUTF(str);
					out.flush();
				}
				
				if(fromClient[0].equals("create-room")){
					String str = "";
					if(!server.getRooms().contains(fromClient[1])){
						server.addRoom(fromClient[1], fromClient[2], fromClient[3]);
						 str= Protocol.createMessage("create-room", "true");
					}
					else{
						str = Protocol.createMessage("create-room", "false");
					}
					out.writeUTF(str);
					out.flush();
					
				}

			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void release() {
		try {
			out.writeUTF("disconnect - Miami");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void obtainProfile() {

	}

	private void loginCheck() {

		loginTryNum++;
		if (loginTryNum > 3)
			deny();

		try {
			out.writeUTF("username and password please - Miami");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void deny() {
		try {
			out.writeUTF("access denied - Miami");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void lexicalError() {
		try {
			out.writeUTF("lexical analysis Error!");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
