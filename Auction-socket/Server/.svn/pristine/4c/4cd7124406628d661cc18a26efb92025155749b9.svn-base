import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Observable;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import dependency.*;

public class Server extends Observable {

	private ServerSocket serverSocket;
	private InetAddress host = null;
	private int port;

	final int maxThreadNum = 200;
	final int maxPendingConnectNum = 50;

	// data
	private ExecutorService tasks = null;

	long serialID;
	private ArrayList<Room> rooms;

	protected Database database;
	protected String order = " order by id";

	public Server(String host, String port) throws SQLException {

		// transfer host address
		try {
			this.host = InetAddress.getByName(host);
		} catch (UnknownHostException e) {
			System.out.println("\"" + host + "\" is not an IP address");
			return;
		}

		// transfer port number
		try {
			this.port = Integer.parseInt(port);
		} catch (NumberFormatException e) {
			System.out.println("\"" + port + "\" is not an int");
			return;
		}
		System.out.printf("host:%s port:%d\n", this.host, this.port);

		tasks = Executors.newFixedThreadPool(maxThreadNum);
		database = new Database();
		rooms = new ArrayList<Room>();
		// Default room
		rooms.add(new Room("Default", "Open", "0", "Server"));
		
		

		try {
			serverSocket = new ServerSocket(this.port, maxPendingConnectNum, this.host);
			System.out.println("Miami Server started...");

			serialID = 1L;
			database.open();
			// new ServerView(this);
			
			checkStatus();

			while (true) {
				Socket socket = serverSocket.accept();
				tasks.execute(new ClientThread(socket, serialID++, this));
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public ResultSet getUserDatabase() throws SQLException {
		ResultSet rs = database.runQuery("SELECT * FROM nameandpasswd");

		setChanged();
		notifyObservers(rs);
		return rs;
	}

	public synchronized void addRoom(String name, String availability, String numberOfPlayers, String owner) {
		rooms.add(new Room(name, availability, numberOfPlayers, owner));
	}

	/**
	 * @return the rooms
	 */
	public synchronized ArrayList<Room> getRooms() {
		return rooms;
	}

	public synchronized boolean login(String username, String password) {
		try {
			return database.checkLogin(username, password);
		} catch (SQLException e) {
			return false;
		}
	}

	public synchronized boolean register(String username, String password) {
		try {
			if (database.checkUsername(username)) {
				database.insert(username, password, 10000);
				return true;
			}
		} catch (SQLException e) {
			return false;
		}
		return false;
	}
	
	public synchronized void checkStatus(){
		
		Timer t = new Timer();
		
		t.schedule(new TimerTask(){ 
	
			
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			@Override
			public void run(){
				
				String query = "SELECT id,endtime FROM items WHERE status = 'true'" ;
				
				ResultSet result = database.runQuery(query);
				
				ArrayList<Integer> ids = new ArrayList<Integer>();
				
				long currentTime = System.currentTimeMillis();
				
				try {
					while(result.next()){
						
						String end = result.getString(2);
						int id = result.getInt(1);
						
						long timeEnd =sdf.parse(end).getTime();
						
						System.out.println(timeEnd-currentTime);
						
						if(timeEnd < currentTime){
							
							//setStatus(id,false);
							ids.add(id);
						}
					}
					
					for(int i : ids){
						
						setStatus(i,false);
					}

					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}, 0,30000);
	}

	public synchronized void setStatus(int id, boolean bool) {
		database.setStatus(id,bool);
	}
	
	public String getStatus(int id){
		String query = "SELECT status FROM items WHERE id = " + id ;
		
		ResultSet result = database.runQuery(query);
		
		try {
			if(result.next()){
				String status = result.getString(1);
				
				return status;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return false+"";
	}

	public synchronized void updateBid(int id, String user, double price) {
		database.updateBid(id, user, price);
	}

	public synchronized void addItem(String name, String bider, String seller, double fixed_price, int time,
			double start_price) throws NumberFormatException, SQLException {
		database.addItem(name, bider, seller, fixed_price, time, start_price);
	}

	public synchronized ResultSet obtainBidList(String user) {
		String query = "SELECT * FROM items WHERE bidder = '" + user + "'";
		return database.runQuery(query + order);
	}

	public synchronized ResultSet obtainItems(String user) {
		String query = "SELECT * FROM items WHERE seller = '" + user + "'";
		return database.runQuery(query + order);
	}
	
	

	public synchronized ResultSet search(String[] keyWords) {
		String query = "";

		if (keyWords.length == 0) {
			query = "SELECT * FROM items";

		} else if (keyWords.length == 1) {
			query = "SELECT * FROM items WHERE name LIKE '%" + keyWords[0] + "%' AND status = 'true'";

		} else {
			query = "SELECT * FROM items WHERE name LIKE '%" + keyWords[0] + "%' AND status = 'true'";
			for (int i = 1; i < keyWords.length; i++) {
				query.concat("OR name LIKE '%" + keyWords[i] + "%'");
			}
		}

		return database.runQuery(query + order);
	}
	
	public User getUser(String username) throws SQLException{
		
		return database.getUser(username);
	}
	
	public double getCoins(String username){
		
		try {
			return database.getCoins(username);
			
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			return 0;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			return 0;
		}
	}
	
	public synchronized void updateCoins(String user, double price){
		
		double oldCoins;
		try {
			oldCoins = database.getCoins(user);
			
			String query = "UPDATE users SET coins = '" + (oldCoins-price) + "' WHERE username = '" + user+"'";

			System.out.println(query);
			database.update(query);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	public synchronized double currentPrice(int id){
		

		String query = "SELECT currentprice FROM items WHERE id = " + id ;
		
		ResultSet result = database.runQuery(query);
		
		try {
			if(result.next()){
				double currentPrice = result.getDouble(1);
				
				return currentPrice;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return 0;
	}
	
	public synchronized double getFixedPrice(int id){
		
		String query = "SELECT price FROM items WHERE id = " + id ;
		
		ResultSet result = database.runQuery(query);
		
		try {
			if(result.next()){
				double fixedPrice = result.getDouble(1);
				
				return fixedPrice;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return 0;
	}
	
	public synchronized void returnCoins(int id) {
		

		String query = "SELECT bidder, currentprice FROM items WHERE id = " + id ;
		
		ResultSet result = database.runQuery(query);
		
		try {
			if (result.next()) {

				String user = result.getString(1);
				double currentPrice = result.getDouble(2);
				
				double oldCoins = database.getCoins(user);
				
				String query2 = "UPDATE users SET coins = '" + (oldCoins+currentPrice) + "' WHERE username = '" + user+"'";
				
				System.out.println(query2);
				
				database.update(query2);
			}
		} 
		
		
		
		catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	

}
